{"version":3,"sources":["Context.js","components/NavBar/NavBarButtons.js","components/NavBar/NavBarButtonsMobile.js","components/NavBar/NavBar.js","components/Post/Post.js","components/Post/EditPost.js","components/Post/MyPost.js","pages/HomePage.js","pages/LoginPage.js","pages/RegisterPage.js","components/NewPostComponent.js","pages/NewPostPage.js","components/EditUser.js","pages/ProfilePage.js","pages/MyPostsPage.js","pages/EditPostPage.js","components/Post/PostConfirm.js","pages/ConfirmSwapPage.js","pages/RecievedLikesPage.js","pages/SCDjelatnikPage.js","App.js","serviceWorker.js","index.js"],"names":["reducer","info","newInfo","localStorage","removeItem","initialState","loggedIn","token","role","localState","JSON","parse","getItem","InfoContext","React","createContext","InfoProvider","props","useReducer","setInfo","useEffect","setItem","stringify","Provider","value","children","NavBarButtons","useContext","className","Fragment","to","type","HomeOutlined","UserOutlined","onClick","removeLikes","count","likes","dot","removeSwaps","swaps","UserAddOutlined","useState","visible","setVisible","onClose","style","color","MenuOutlined","fontSize","title","width","closable","console","log","NavBar","setLikes","setSwaps","axios","post","process","headers","Authorization","then","res","catch","get","data","alt","src","NavBarButtonsMobile","Meta","Card","require","Post","idOglas","kategorija_sobe","kat","paviljon","username","email","like1","setLike1","like2","setLike2","like3","setLike3","likeHandler","oglasId","stupanjLajkanja","a","values","notification","message","description","lajk","maxWidth","margin","actions","HeartFilled","HeartOutlined","data-tip","data-for","DeleteOutlined","id","place","effect","float","Option","Select","EditPost","validateMessages","state","domovi","setState","openNotification","status","open","optionDomovi","this","map","dom","idDom","imeDoma","closeHandler","bodyStyle","paddingBottom","labelCol","span","name","onFinish","err","Item","rules","required","initialValue","placeholder","getFieldValue","validator","rule","test","Promise","resolve","reject","prefix","kategorijaSobe","htmlType","Component","editPostDrawerVisible","setEditPostDrawerVisible","aktivanTag","aktivan","EditOutlined","marginBottom","Content","Layout","Footer","Panel","Collapse","HomePage","allPosts","setAllPosts","visiblePosts","setVisiblePosts","setID","submitButton","setSubmitButton","setDomovi","postsObjects","oglas","student","MyPost","key","Form","useForm","form","minHeight","padding","defaultActiveKey","onChange","header","wrapperCol","p","kateg","setFieldsValue","domQuery","paviljonQuery","katQuery","kategorijaSobeQuery","values2","visiblePostsTmp","forEach","dom_kat_kategorija_paviljon","odbacujem_post","el","includes","toString","push","undefined","initialValues","residence","scrollToFirstError","label","textAlign","Title","Typography","LoginPage","getRole","token2","userRole","accessToken","onFinishFailed","errorInfo","LockOutlined","RegisterPage","registered","setregistered","min","max","NewPostComponent","gradovi","grad","idGrada","imeGrada","level","NewPostPage","password","jmbag","ProfilePage","editUserDrawerVisible","setEditUserDrawerVisible","setUsername","setName","setJmbag","setEmail","setId","EditUser","Input","TextArea","MyPostsPage","posts","setPosts","meta","columns","fields","requried","viewMode","idLanac","likeErrorNotification","ConfirmSwap","idLanca","RejectSwap","CheckCircleOutlined","CloseCircleOutlined","ConfirmSwapPage","getPosts","length","PostConfirm","SCDjelatnikPage","lanci","setLanci","getSwaps","uniqueIds","uniqueIdsObject","objekt","oglasi","i","lanciComponent","Object","keys","lanac","bordered","borderBottom","App","config","exact","path","component","EditPostPage","RecievedLikesPage","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d1d35457.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\n// export const LoginContext = createContext({});\r\n// export const TokenContext = createContext({});\r\n// export const RoleContext = createContext({});\r\n\r\n\r\n\r\nimport React, { useReducer, useEffect } from \"react\";\r\n\r\nlet reducer = (info, newInfo) => {\r\n  if (newInfo === null) {\r\n    localStorage.removeItem(\"info\");\r\n    return initialState;\r\n  }\r\n  return { ...info, ...newInfo };\r\n};\r\n\r\nconst initialState = {\r\n  loggedIn: false,\r\n  token: \"\",\r\n  role: false\r\n};\r\n\r\nconst localState = JSON.parse(localStorage.getItem(\"info\"));\r\n\r\nconst InfoContext = React.createContext();\r\n\r\nfunction InfoProvider(props) {\r\n  const [info, setInfo] = useReducer(reducer, localState || initialState);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"info\", JSON.stringify(info));\r\n  }, [info]);\r\n\r\n  return (\r\n    <InfoContext.Provider value={{ info, setInfo }}>\r\n      {props.children}\r\n    </InfoContext.Provider>\r\n  );\r\n}\r\n\r\nexport { InfoContext, InfoProvider };\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Button, Badge } from \"antd\";\r\nimport { HomeOutlined, UserOutlined, UserAddOutlined } from \"@ant-design/icons\";\r\nimport \"./NavBar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import { LoginContext } from \"../../Context\";\r\n// import { TokenContext } from \"../../Context\";\r\n// import { RoleContext } from \"../../Context\";\r\nimport { InfoContext } from \"../../Context\";\r\n\r\nfunction NavBarButtons(props) {\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const { role, setRole } = useContext(RoleContext);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"role2\");\r\n\r\n    // console.log(role);\r\n  }, []);\r\n\r\n  const renderSwitch = (loggedIn, role) => {\r\n    // console.log(\"loggedIn, role\");\r\n    // console.log(loggedIn);\r\n    // console.log(role);\r\n    if (loggedIn && role == \"STUDENT\") {\r\n      return (\r\n        <>\r\n          <React.Fragment>\r\n            <Link to=\"/\">\r\n              <Button type=\"text\" className=\"navButton\">\r\n                <HomeOutlined />\r\n                Početna\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/myposts\">\r\n              <Button type=\"text\" className=\"navButton\">\r\n                <UserOutlined />\r\n                Moji oglasi\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/profile\">\r\n              <Button type=\"text\" className=\"navButton\">\r\n                <UserOutlined />\r\n                Uredi profil\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/recievedlikesposts\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButton\"\r\n                onClick={() => props.removeLikes()}\r\n              >\r\n                <UserOutlined />\r\n                Dobiveni lajkovi\r\n                <Badge count={props.likes} dot />\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/confirmswap\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButton\"\r\n                onClick={() => props.removeSwaps()}\r\n              >\r\n                <UserOutlined />\r\n                Moguće zamjene\r\n                <Badge count={props.swaps} dot />\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButton\"\r\n                onClick={() => {\r\n                  // setLoggedIn(false);\r\n                  // setRole(false);\r\n                  // setToken(\"\");\r\n                  setInfo({loggedIn:false, role:false, token:\"\"});\r\n                }}\r\n              >\r\n                <UserOutlined />\r\n                Odjava\r\n              </Button>\r\n            </Link>\r\n          </React.Fragment>\r\n        </>\r\n      );\r\n    } else if (loggedIn) {\r\n      return (\r\n        <>\r\n          <React.Fragment>\r\n            <Link to=\"/\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButton\"\r\n                onClick={() => {\r\n                  // setLoggedIn(false);\r\n                  // setRole(false);\r\n                  // setToken(\"\");\r\n                  setInfo({loggedIn:false, role:false, token:\"\"});\r\n                }}\r\n              >\r\n                <UserOutlined />\r\n                Odjava\r\n              </Button>\r\n            </Link>\r\n          </React.Fragment>\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <Link to=\"/\">\r\n            <Button type=\"text\" className=\"navButton\">\r\n              <HomeOutlined />\r\n              Početna\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"/login\">\r\n            <Button type=\"text\" className=\"navButton\">\r\n              <UserOutlined />\r\n              Prijavi se\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"/register\">\r\n            <Button type=\"text\" className=\"navButton\">\r\n              <UserAddOutlined />\r\n              Registriraj se\r\n            </Button>\r\n          </Link>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return <div className=\"navContainer\">{renderSwitch(info.loggedIn, info.role)}</div>;\r\n}\r\n\r\nexport default NavBarButtons;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Drawer, Button, Badge } from \"antd\";\r\nimport {\r\n  HomeOutlined,\r\n  UserOutlined,\r\n  UserAddOutlined,\r\n  MenuOutlined,\r\n} from \"@ant-design/icons\";\r\nimport \"./NavBar.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// import { LoginContext } from \"../../Context\";\r\n// import { TokenContext } from \"../../Context\";\r\n// import { RoleContext } from \"../../Context\";\r\nimport { InfoContext } from \"../../Context\";\r\n\r\nfunction NavBarButtons(props) {\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const { role, setRole } = useContext(RoleContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  // const[childrenDrawer, setchildrenDrawer] = useState(false);\r\n\r\n  const showDrawer = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const renderSwitch = (loggedIn, role) => {\r\n    console.log(\"loggedIn, role\");\r\n    console.log(loggedIn);\r\n    console.log(role);\r\n    if (loggedIn && role == \"STUDENT\") {\r\n      console.log(\"JA SAM STUDENT\");\r\n\r\n      return (\r\n        <>\r\n          <React.Fragment>\r\n            <Link to=\"/\">\r\n              <Button type=\"text\" className=\"navButtonMobile\" onClick={onClose}>\r\n                <HomeOutlined />\r\n                Početna\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/myposts\">\r\n              <Button type=\"text\" className=\"navButtonMobile\" onClick={onClose}>\r\n                <UserOutlined />\r\n                Moji oglasi\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/profile\">\r\n              <Button type=\"text\" className=\"navButtonMobile\" onClick={onClose}>\r\n                <UserOutlined />\r\n                Uredi profil\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/recievedlikesposts\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButtonMobile\"\r\n                onClick={() => props.removeLikes()}\r\n              >\r\n                <UserOutlined />\r\n                Dobiveni lajkovi\r\n                <Badge count={props.likes} dot />\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/confirmswap\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButtonMobile\"\r\n                onClick={() => props.removeSwaps()}\r\n              >\r\n                <UserOutlined />\r\n                Moguće zamjene\r\n                <Badge count={props.swaps} dot />\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/\">\r\n              <Button\r\n                type=\"text\"\r\n                className=\"navButtonMobile\"\r\n                onClick={() => {\r\n                  // setLoggedIn(false);\r\n                  setVisible(true);\r\n                  // setRole(false);\r\n                  // setToken(\"\");\r\n                  setInfo({loggedIn:false, role:false, token:\"\"});\r\n                }}\r\n              >\r\n                <UserOutlined />\r\n                Odjava\r\n              </Button>\r\n            </Link>\r\n          </React.Fragment>\r\n        </>\r\n      );\r\n    } else if (loggedIn) {\r\n      console.log(\"JA SAM DJELATNIK\");\r\n      return (\r\n        <React.Fragment>\r\n          {\" \"}\r\n          <Link to=\"/\">\r\n            <Button\r\n              type=\"text\"\r\n              className=\"navButtonMobile\"\r\n              onClick={() => {\r\n                // setLoggedIn(false);\r\n                setVisible(true);\r\n                // setRole(false);\r\n                // setToken(\"\");\r\n                setInfo({loggedIn:false, role:false, token:\"\"});\r\n              }}\r\n            >\r\n              <UserOutlined />\r\n              Odjava\r\n            </Button>\r\n          </Link>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      console.log(\"JA NISAM NIŠTA\");\r\n\r\n      return (\r\n        <React.Fragment>\r\n          <Link to=\"/\">\r\n            <Button type=\"text\" className=\"navButtonMobile\" onClick={onClose}>\r\n              <HomeOutlined />\r\n              Početna\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"/login\">\r\n            <Button type=\"text\" className=\"navButtonMobile\" onClick={onClose}>\r\n              <UserOutlined />\r\n              Prijavi se\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link to=\"/register\">\r\n            <Button type=\"text\" className=\"navButtonMobile\" onClick={onClose}>\r\n              <UserAddOutlined />\r\n              Registriraj se\r\n            </Button>\r\n          </Link>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        className=\"navContainerMobile\"\r\n        type=\"text\"\r\n        onClick={showDrawer}\r\n        style={{ color: \"#fff\" }}\r\n      >\r\n        <MenuOutlined style={{ fontSize: \"24px\" }} />\r\n      </Button>\r\n      <Drawer\r\n        title=\"RoomSwitchr\"\r\n        width={200}\r\n        closable={true}\r\n        onClose={onClose}\r\n        visible={visible}\r\n      >\r\n        {renderSwitch(info.loggedIn, info.role)}\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBarButtons;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport \"./NavBar.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport NavBarButtons from \"./NavBarButtons\";\r\nimport NavBarButtonsMobile from \"./NavBarButtonsMobile\";\r\nimport axios from \"axios\";\r\n// import { LoginContext } from \"../../Context\";\r\n// import { TokenContext } from \"../../Context\";\r\n// import { RoleContext } from \"../../Context\";\r\nimport { InfoContext } from \"../../Context\";\r\n\r\nfunction NavBar() {\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const { role, setRole } = useContext(RoleContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n\r\n  const [likes, setLikes] = useState(0);\r\n  const [swaps, setSwaps] = useState(0);\r\n\r\n  const getLikes = () => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/home/notification/like`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setLikes(res.data);\r\n      })\r\n      .catch((res) => {});\r\n  };\r\n\r\n  const getSwaps = () => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/home/notification/swap`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setSwaps(res.data);\r\n      })\r\n      .catch((res) => {});\r\n  };\r\n\r\n  const removeLikes = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/api/home/notification/like`,\r\n        {},\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        setLikes(0);\r\n      })\r\n      .catch((res) => {});\r\n  };\r\n\r\n  const removeSwaps = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/api/home/notification/swap`,\r\n        {},\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        setSwaps(0);\r\n      })\r\n      .catch((res) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(info.role);\r\n    if (info.loggedIn && info.role == \"STUDENT\") {\r\n      getLikes();\r\n      getSwaps();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"nav\">\r\n      <img alt=\"logo\" src=\"/room.png\" className=\"navLogo\" />\r\n      <Link to=\"/\">\r\n        <span className=\"navName\">RoomSwitchr</span>\r\n      </Link>\r\n      <NavBarButtons\r\n        likes={likes}\r\n        swaps={swaps}\r\n        removeLikes={removeLikes}\r\n        removeSwaps={removeSwaps}\r\n      />\r\n      <NavBarButtonsMobile\r\n        likes={likes}\r\n        swaps={swaps}\r\n        removeLikes={removeLikes}\r\n        removeSwaps={removeSwaps}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Card, Avatar, notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\n\r\n\r\n// import { LoginContext } from \"../Context\";\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../../Context\";\r\n\r\nimport { HeartOutlined, HeartFilled, DeleteOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Meta } = Card;\r\n\r\nvar MappleToolTip = require(\"reactjs-mappletooltip\");\r\n\r\nfunction Post(props) {\r\n  const title = \"Dom: \" + props.title;\r\n  //const description = props.description;\r\n  const idOglas = props.idOglas;\r\n  const kategorija_sobe = props.kategorija_sobe;\r\n  const kat = props.kat;\r\n  const paviljon = props.paviljon;\r\n  const username = props.username;\r\n  const email = props.email;\r\n\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  const [like, setLike] = useState();\r\n\r\n  const [like1, setLike1] = useState(false);\r\n  const [like2, setLike2] = useState(false);\r\n  const [like3, setLike3] = useState(false);\r\n\r\n  const likeErrorNotification = () => {\r\n    notification[\"error\"]({\r\n      message: \"Greška\",\r\n      description: \"Došlo je do greške prilikom lajkanja oglasa. Provjerite svoj aktivni oglas.\",\r\n    });\r\n  };\r\n\r\n  const likeHandler = async (oglasId, stupanjLajkanja) => {\r\n    let values = {\r\n      oglasId: oglasId,\r\n      stupanjLajkanja: stupanjLajkanja,\r\n    };\r\n\r\n    try {\r\n      await axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/home/`, values, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          switch (res.data.stupanjLajkanja) {\r\n            case 1:\r\n              setLike1(true);\r\n              setLike2(false);\r\n              setLike3(false);\r\n              break;\r\n            case 2:\r\n              setLike1(false);\r\n              setLike2(true);\r\n              setLike3(false);\r\n              break;\r\n\r\n            case 3:\r\n              setLike1(false);\r\n              setLike2(false);\r\n              setLike3(true);\r\n              break;\r\n\r\n            case 0:\r\n              setLike1(false);\r\n              setLike2(false);\r\n              setLike3(false);\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        });\r\n    } catch (error) {\r\n      likeErrorNotification();\r\n    }\r\n  };\r\n\r\n  const setLikeFromAPI = (lajk) => {\r\n    if (lajk == 1) {\r\n      setLike1(true);\r\n    }\r\n\r\n    if (lajk == 2) {\r\n      setLike2(true);\r\n    }\r\n\r\n    if (lajk == 3) {\r\n      setLike3(true);\r\n    }\r\n  };\r\n\r\n  const Remove = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/api/home/`,\r\n        {\r\n          stupanjLajkanja: \"4\",\r\n          oglasId: idOglas,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLikeFromAPI(props.lajk);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {info.loggedIn ? (\r\n        <Card\r\n          style={{ maxWidth: \"720px\", margin: \"auto\" }}\r\n          actions={[\r\n            like1 ? (\r\n              <div onClick={() => likeHandler(idOglas, \"0\")}>\r\n                <HeartFilled />\r\n              </div>\r\n            ) : (\r\n              <div onClick={() => likeHandler(idOglas, \"1\")}>\r\n                <HeartOutlined />\r\n              </div>\r\n            ),\r\n\r\n            like2 ? (\r\n              <div onClick={() => likeHandler(idOglas, \"0\")}>\r\n                <HeartFilled />\r\n                <HeartFilled />\r\n              </div>\r\n            ) : (\r\n              <div onClick={() => likeHandler(idOglas, \"2\")}>\r\n                <HeartOutlined />\r\n                <HeartOutlined />\r\n              </div>\r\n            ),\r\n\r\n            like3 ? (\r\n              <div onClick={() => likeHandler(idOglas, \"0\")}>\r\n                <HeartFilled />\r\n                <HeartFilled />\r\n                <HeartFilled />\r\n              </div>\r\n            ) : (\r\n              <div onClick={() => likeHandler(idOglas, \"3\")}>\r\n                <HeartOutlined />\r\n                <HeartOutlined />\r\n                <HeartOutlined />\r\n              </div>\r\n            ),\r\n\r\n            // <Button type=\"text\" className=\"navButton\">Ne prikazuj više</Button>,\r\n\r\n            <div className=\"App\">\r\n              <p\r\n                data-tip\r\n                data-for=\"registerTip\"\r\n                onClick={() => Remove(idOglas)}\r\n              >\r\n                <DeleteOutlined />\r\n              </p>\r\n\r\n              <ReactTooltip id=\"registerTip\" place=\"top\" effect=\"solid\">\r\n                Ne prikazuj više\r\n              </ReactTooltip>\r\n            </div>,\r\n          ]}\r\n        >\r\n          <Meta\r\n            title={title}\r\n            description={\r\n              <React.Fragment style={{width: \"100%\"}}>\r\n                <div style={{width: \"70%\", float:\"left\"}}>\r\n                  <p>Paviljon:&nbsp;{paviljon}</p>\r\n                  <p>Kat:&nbsp; {kat}</p>\r\n                  <p>Kategorija sobe:&nbsp;{kategorija_sobe}</p>\r\n                </div>\r\n\r\n                <div style={{width: \"30%\", float:\"right\"}}>\r\n                  <p>Korisničko ime:&nbsp;{username}</p>\r\n                  <p>E-mail:&nbsp;{email}</p>\r\n                </div>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </Card>\r\n      ) : (\r\n        <Card style={{ maxWidth: \"720px\", margin: \"auto\" }}>\r\n          <Meta\r\n            title={title}\r\n            description={\r\n              <React.Fragment>\r\n                <p>Paviljon:&nbsp;{paviljon}</p>\r\n                <p>Kat:&nbsp;{kat}</p>\r\n                <p>Kategorija sobe:&nbsp;{kategorija_sobe}</p>\r\n                <p>Korisničko ime:&nbsp;{username}</p>\r\n                <p>E-mail:&nbsp;{email}</p>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </Card>\r\n      )}\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport { Form, Input, Button, Drawer, Select, notification } from \"antd\";\r\nimport { HomeOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./EditWorkerDrawerCssFix.css\";\r\nconst { Option } = Select;\r\n\r\nclass EditPost extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { domovi: [], post: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var domovi = [];\r\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/dom`).then((res) => {\r\n      domovi = res.data;\r\n      this.setState({ domovi: domovi });\r\n    });\r\n  }\r\n\r\n  validateMessages = () => {};\r\n\r\n  render() {\r\n    const openNotification = (status) => {\r\n      if (status === 1) {\r\n        notification.open({\r\n          message: \"Uspješna predaja\",\r\n          description: \"Novi oglas je uspješno predan!\",\r\n        });\r\n      } else if (status === 0) {\r\n        notification.open({\r\n          message: \"Neuspješna predaja\",\r\n          description: \"Molimo pokušajte ponovno.\",\r\n        });\r\n      }\r\n    };\r\n\r\n    const onFinish = (values) => {\r\n      values.idOglas = this.props.idOglas;\r\n      axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/v1/post`, values, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + this.props.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          openNotification(1);\r\n        })\r\n        .catch((err) => {\r\n          openNotification(0);\r\n        });\r\n    };\r\n\r\n    const layout = {\r\n      labelCol: { span: 8 },\r\n    };\r\n    let optionDomovi = this.state.domovi.map((dom) => (\r\n      <Option value={dom.idDom}>{dom.imeDoma}</Option>\r\n    ));\r\n\r\n    return (\r\n      <div>\r\n        <Drawer\r\n          title=\"Uredi oglas\"\r\n          onClose={() => this.props.closeHandler()}\r\n          visible={this.props.visible}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n          // style={{ width: \"100vw\" }}\r\n          width={\"400px\"}\r\n        >\r\n          <Form\r\n            {...layout}\r\n            name=\"nest-messages\"\r\n            onFinish={onFinish}\r\n            validateMessages={this.validateMessages}\r\n          >\r\n            <Form.Item\r\n              name=\"domID\"\r\n              rules={[{ required: true, message: \"Odaberite dom!\" }]}\r\n              initialValue={this.props.idDom}\r\n            >\r\n              <Select placeholder=\"Dom\">{optionDomovi}</Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"paviljon\"\r\n              rules={[\r\n                { required: true, message: \"Odaberite paviljon!\" },\r\n                ({ getFieldValue }) => ({\r\n                  validator(rule, value) {\r\n                    const re = /^[0-9\\b]+$/;\r\n                    if (\r\n                      value === \"\" ||\r\n                      (re.test(value) && value >= 1 && value <= 20)\r\n                    ) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\"Upišite broj od 1 do 20!\");\r\n                  },\r\n                }),\r\n              ]}\r\n              initialValue={this.props.paviljon}\r\n            >\r\n              <Input\r\n                prefix={<HomeOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Paviljon\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"kategorijaSobe\"\r\n              rules={[\r\n                { required: true, message: \"Odaberite kategoriju sobe!\" },\r\n                ({ getFieldValue }) => ({\r\n                  validator(rule, value) {\r\n                    const re = /^[0-9\\b]+$/;\r\n                    if (\r\n                      value === \"\" ||\r\n                      (re.test(value) && value >= 1 && value <= 7)\r\n                    ) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\"Upišite broj od 1 do 7!\");\r\n                  },\r\n                }),\r\n              ]}\r\n              initialValue={this.props.kategorijaSobe}\r\n            >\r\n              <Input\r\n                prefix={<HomeOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Kategorija sobe\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n              name=\"kat\"\r\n              rules={[\r\n                { required: true, message: \"Odaberite kat!\" },\r\n                ({ getFieldValue }) => ({\r\n                  validator(rule, value) {\r\n                    const re = /^[0-9\\b]+$/;\r\n                    if (\r\n                      value === \"\" ||\r\n                      (re.test(value) && value >= 1 && value <= 10)\r\n                    ) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\"Upišite broj od 1 do 10!\");\r\n                  },\r\n                }),\r\n              ]}\r\n              initialValue={this.props.kat}\r\n            >\r\n              <Input\r\n                prefix={<HomeOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Kat\"\r\n              />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-form-button\"\r\n              >\r\n                Spremi promjene\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditPost;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Card, Avatar, Tag } from \"antd\";\r\n// import { TokenContext } from \"../../Context\";\r\n// import { LoginContext } from \"../../Context\";\r\nimport EditPost from \"./EditPost\";\r\nimport { InfoContext } from \"../../Context\";\r\n\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction Post(props) {\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  const [editPostDrawerVisible, setEditPostDrawerVisible] = useState(false);\r\n\r\n  const title = \"Dom: \" + props.title;\r\n  //const description = props.description;\r\n  const idOglas = props.idOglas;\r\n  const kategorija_sobe = props.kategorija_sobe;\r\n  const kat = props.kat;\r\n  const paviljon = props.paviljon;\r\n\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n\r\n  const showDrawer = () => {\r\n    setEditPostDrawerVisible(true);\r\n  };\r\n\r\n  const onCloseDrawer = () => {\r\n    setEditPostDrawerVisible(false);\r\n  };\r\n\r\n  let aktivanTag = null;\r\n  if (props.aktivan) {\r\n    aktivanTag = <Tag color=\"green\">Aktivan oglas</Tag>;\r\n  } else {\r\n    aktivanTag = <Tag color=\"red\">Neaktivan oglas</Tag>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        style={{ maxWidth: \"720px\", margin: \"auto\" }}\r\n        actions={[\r\n          <div onClick={() => showDrawer()}>\r\n            <EditOutlined /> uredi\r\n          </div>,\r\n        ]}\r\n      >\r\n        <Tag color=\"magenta\" style={{ marginBottom: \"10px\" }}>\r\n          Moja Objava\r\n        </Tag>\r\n        {aktivanTag}\r\n        <br />\r\n        <Meta\r\n          title={title}\r\n          description={\r\n            <React.Fragment>\r\n              <p>Paviljon:&nbsp;{paviljon}</p>\r\n              <p>Kat:&nbsp;{kat}</p>\r\n              <p>Kategorija sobe:&nbsp;{kategorija_sobe}</p>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </Card>\r\n      <EditPost\r\n        visible={editPostDrawerVisible}\r\n        closeHandler={() => onCloseDrawer()}\r\n        idOglas={idOglas}\r\n        kat={kat}\r\n        paviljon={paviljon}\r\n        kategorijaSobe={kategorija_sobe}\r\n        dom={props.title}\r\n        idDom={props.idDom}\r\n        token={info.token}\r\n      />\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Layout, Form, Input, Button } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport Post from \"../components/Post/Post\";\r\nimport MyPost from \"../components/Post/MyPost\";\r\nimport axios from \"axios\";\r\nimport { Collapse, Select } from \"antd\";\r\n\r\n// import { LoginContext } from \"../Context\";\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Panel } = Collapse;\r\nconst { Option } = Select;\r\n\r\nexport default function HomePage() {\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  const [allPosts, setAllPosts] = useState([]);\r\n  const [visiblePosts, setVisiblePosts] = useState([]);\r\n  const [id, setID] = useState([]);\r\n  const [submitButton, setSubmitButton] = useState(0);\r\n  const [domovi, setDomovi] = useState([]);\r\n\r\n  const layout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 20 },\r\n  };\r\n\r\n  const [applyFilterDrawerVisible, setApplyFilterDrawerVisible] = useState(\r\n    false\r\n  );\r\n\r\n  const showDrawer = () => {\r\n    setApplyFilterDrawerVisible(true);\r\n  };\r\n\r\n  const onCloseDrawer = () => {\r\n    setApplyFilterDrawerVisible(false);\r\n  };\r\n\r\n  const getPosts = () => {\r\n    if (info.loggedIn) {\r\n      axios\r\n        .get(`${process.env.REACT_APP_API_URL}/api/v1/currentuser/`, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          setID(res.data.id);\r\n        });\r\n    }\r\n\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/home/`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setAllPosts(res.data);\r\n        setVisiblePosts(res.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n    var domovi = [];\r\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/dom`).then((res) => {\r\n      domovi = res.data;\r\n      setDomovi(domovi);\r\n    });\r\n  }, []);\r\n\r\n  let postsObjects = visiblePosts.map((post) => {\r\n    if (info.loggedIn) {\r\n      if (post.oglas.student.id === id) {\r\n        return (\r\n          <MyPost\r\n            key={post.oglas.idOglas}\r\n            kat={post.oglas.kat}\r\n            idOglas={post.oglas.idOglas}\r\n            paviljon={post.oglas.paviljon}\r\n            kategorija_sobe={post.oglas.kategorijaSobe}\r\n            title={post.oglas.dom.imeDoma}\r\n            idDom={post.oglas.dom.idDom}\r\n            aktivan={post.oglas.aktivan}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <Post\r\n            key={post.oglas.idOglas}\r\n            kat={post.oglas.kat}\r\n            idOglas={post.oglas.idOglas}\r\n            paviljon={post.oglas.paviljon}\r\n            kategorija_sobe={post.oglas.kategorijaSobe}\r\n            title={post.oglas.dom.imeDoma}\r\n            lajk={post.stupanjLajkanja}\r\n            username={post.oglas.student.username}\r\n            email={post.oglas.student.email}\r\n          />\r\n        );\r\n      }\r\n    } else {\r\n      return (\r\n        <Post\r\n          key={post.oglas.idOglas}\r\n          kat={post.oglas.kat}\r\n          idOglas={post.oglas.idOglas}\r\n          paviljon={post.oglas.paviljon}\r\n          kategorija_sobe={post.oglas.kategorijaSobe}\r\n          title={post.oglas.dom.imeDoma}\r\n          username={post.oglas.student.username}\r\n          email={post.oglas.student.email}\r\n        />\r\n      );\r\n    }\r\n  });\r\n  const [form] = Form.useForm();\r\n  const handleSearchChange = (values) => {\r\n    if (submitButton == 1) {\r\n      axios\r\n        .get(`${process.env.REACT_APP_API_URL}/api/home/filter`, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          let p,kat,kateg;\r\n          if (res.data.paviljon !== 0){\r\n            p = res.data.paviljon\r\n          }\r\n          if (res.data.kat !== 0){\r\n            kat = res.data.kat\r\n          }\r\n          if (res.data.kategorijaSobe !== 0){\r\n            kateg = res.data.kategorijaSobe\r\n          }\r\n          form.setFieldsValue({\r\n            domQuery: res.data.dom,\r\n            paviljonQuery: p,\r\n            katQuery: kat,\r\n            kategorijaSobeQuery: kateg,\r\n          });\r\n        })\r\n        .catch((res) => {});\r\n    } else if (submitButton == 2) {\r\n      console.log(values);\r\n      let values2 = {\r\n        dom: values.domQuery,\r\n        paviljon: values.paviljonQuery,\r\n        kat: values.katQuery,\r\n        kategorijaSobe: values.kategorijaSobeQuery,\r\n      };\r\n      axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/home/filter`, values2, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {})\r\n        .catch((res) => {});\r\n    } else {\r\n      let visiblePostsTmp = [];\r\n      allPosts.forEach((post) => {\r\n        let dom_kat_kategorija_paviljon = [\r\n          values.domQuery,\r\n          values.katQuery,\r\n          values.kategorijaSobeQuery,\r\n          values.paviljonQuery,\r\n        ];\r\n        if (\r\n          typeof values.domQuery !== \"undefined\" ||\r\n          typeof values.katQuery !== \"undefined\" ||\r\n          typeof values.kategorijaSobeQuery !== \"undefined\" ||\r\n          typeof values.paviljonQuery !== \"undefined\"\r\n        ) {\r\n          let count = 0;\r\n          let odbacujem_post = false;\r\n          dom_kat_kategorija_paviljon.forEach((el) => {\r\n            if (el) {\r\n              if (count == 0) {\r\n                if (!post.oglas.dom.imeDoma.includes(values.domQuery)) {\r\n                  odbacujem_post = true;\r\n                }\r\n              } else if (count == 1) {\r\n                if (!post.oglas.kat.toString().includes(values.katQuery)) {\r\n                  odbacujem_post = true;\r\n                }\r\n              } else if (count == 2) {\r\n                if (\r\n                  !post.oglas.kategorijaSobe\r\n                    .toString()\r\n                    .includes(values.kategorijaSobeQuery)\r\n                ) {\r\n                  odbacujem_post = true;\r\n                }\r\n              } else if (count == 3) {\r\n                if (\r\n                  !post.oglas.paviljon.toString().includes(values.paviljonQuery)\r\n                ) {\r\n                  odbacujem_post = true;\r\n                }\r\n              }\r\n            }\r\n            count++;\r\n          });\r\n          if (!odbacujem_post) {\r\n            visiblePostsTmp.push(post);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (\r\n        (values.paviljonQuery === undefined || values.paviljonQuery === \"\") &&\r\n        (values.katQuery === undefined || values.katQuery === \"\") &&\r\n        (values.kategorijaSobeQuery === undefined ||\r\n          values.kategorijaSobeQuery === \"\") &&\r\n        (values.domQuery === undefined || values.domQuery === \"\")\r\n      ) {\r\n        visiblePostsTmp = allPosts;\r\n      }\r\n\r\n      setVisiblePosts(visiblePostsTmp);\r\n    }\r\n  };\r\n\r\n  let optionDomovi = domovi.map((dom) => (\r\n    <Option value={dom.imeDoma}>{dom.imeDoma}</Option>\r\n  ));\r\n\r\n  return (\r\n    <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n      <NavBar />\r\n      <Content style={{ padding: \"0 50px\" }}>\r\n        <div\r\n          className=\"site-layout-content\"\r\n          style={{ maxWidth: \"720px\", margin: \"0 auto\" }}\r\n        >\r\n          <br />\r\n\r\n          <Collapse defaultActiveKey={[\"0\"]} onChange={() => {}}>\r\n            <Panel header=\"Filtriranje oglasa\" key=\"1\">\r\n              <Form\r\n                {...layout}\r\n                name=\"register\"\r\n                onFinish={handleSearchChange}\r\n                form={form}\r\n                initialValues={{\r\n                  residence: [\"zhejiang\", \"hangzhou\", \"xihu\"],\r\n                  prefix: \"86\",\r\n                }}\r\n                scrollToFirstError\r\n              >\r\n                <Form.Item name=\"domQuery\" label=\"Dom\">\r\n                  <Select placeholder=\"Dom\">\r\n                    {optionDomovi}\r\n                    <Option value={null}>Ne filtriraj prema domu</Option>\r\n                  </Select>\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"paviljonQuery\" label=\"Paviljon\">\r\n                  <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"katQuery\" label=\"Kat\">\r\n                  <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item name=\"kategorijaSobeQuery\" label=\"Kategorija Sobe\">\r\n                  <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item style={{ textAlign: \"right\" }}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    className=\"login-form-button\"\r\n                    onClick={() => setSubmitButton(3)}\r\n                  >\r\n                    Pretraži\r\n                  </Button>\r\n                  {info.loggedIn ? (\r\n                    <>\r\n                      <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        className=\"login-form-button\"\r\n                        onClick={() => setSubmitButton(2)}\r\n                        style={{ margin: \"10px\" }}\r\n                      >\r\n                        Spremi filter\r\n                      </Button>\r\n                      <Button\r\n                        type=\"primary\"\r\n                        htmlType=\"submit\"\r\n                        className=\"login-form-button\"\r\n                        onClick={() => setSubmitButton(1)}\r\n                      >\r\n                        Prikaži spremljeni filter\r\n                      </Button>\r\n                    </>\r\n                  ) : null}\r\n                </Form.Item>\r\n              </Form>\r\n            </Panel>\r\n          </Collapse>\r\n\r\n          <br />\r\n\r\n          {postsObjects}\r\n\r\n          <br />\r\n        </div>\r\n      </Content>\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        PiccoloGrupa © 2020 FER PI\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport { Layout, Typography, message, Card, notification } from \"antd\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  StepForwardOutlined,\r\n} from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n// import { LoginContext } from \"../Context\";\r\n// import { TokenContext } from \"../Context\";\r\n// import { RoleContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\n\r\n//ova funkcija samo sluzi za ne imat memoryleak\r\nfunction useStateSafely(initialValue) {\r\n  const [value, setValue] = useState(initialValue);\r\n  const isSafe = useRef(true);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      isSafe.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const setValueSafely = (newValue) => {\r\n    if (isSafe.current) {\r\n      setValue(newValue);\r\n    }\r\n  };\r\n\r\n  return [value, setValueSafely];\r\n}\r\n\r\nexport default function LoginPage() {\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const [role, setRole] = useStateSafely(\"\");\r\n  // const { role, setRole } = useContext(RoleContext);\r\n\r\n  const onFinishFailed = (errorInfo) => {};\r\n\r\n  const onFinish = (values) => {\r\n    const openNotification = (status) => {\r\n      if (status === 1) {\r\n        notification.open({\r\n          message: \"Prijava uspješna\",\r\n          description: \"Prebacujemo vas\",\r\n        });\r\n        setInfo({loggedIn: true});\r\n      } else if (status === 0) {\r\n        notification.open({\r\n          message: \"Prijava neuspješna\",\r\n          description: \"Molimo pokušajte ponovno\",\r\n        });\r\n      }\r\n    };\r\n\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}/api/v1/signin`, values)\r\n      .then((res) => {\r\n        let token = res.data.accessToken;\r\n        setInfo({token:token});\r\n        getRole(res.data.accessToken);\r\n        console.log(res.data.role);\r\n        // setRole(res.data.role);\r\n        openNotification(1);\r\n      })\r\n      .catch((res) => {\r\n        openNotification(0);\r\n      });\r\n  };\r\n\r\n  const getRole = (token2) => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/v1/currentuser`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + token2, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(\"new role \" + res.data.userRole);\r\n        setInfo({role:res.data.userRole});\r\n        console.log(\"role variable: \" + info.role);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (info.token) {\r\n      getRole(info.token);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {info.loggedIn && info.role === \"SC_DJELATNIK\" ? (\r\n        <Redirect to=\"/scdjelatnik\" />\r\n      ) : null}\r\n      {info.loggedIn && info.role === \"STUDENT\" ? <Redirect to=\"/\" /> : null}\r\n      <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n        <NavBar />\r\n        <Content style={{ maxWidth: \"720px\", margin: \"auto\", padding: \"2em\" }}>\r\n          <Card>\r\n            <Title>Prijava</Title>\r\n            <Form\r\n              name=\"normal_login\"\r\n              className=\"login-form\"\r\n              onFinish={onFinish}\r\n              onFinishFailed={onFinishFailed}\r\n            >\r\n              <Form.Item\r\n                name=\"username\"\r\n                rules={[\r\n                  { required: true, message: \"Upiši svoje korisničko ime!\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Korisničko ime\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[{ required: true, message: \"Upiši svoju lozinku!\" }]}\r\n              >\r\n                <Input\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                  type=\"password\"\r\n                  placeholder=\"Lozinka\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"login-form-button\"\r\n                >\r\n                  Prijavi se\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          PiccoloGrupa © 2020 FER PI\r\n        </Footer>\r\n      </Layout>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Layout, Typography, notification } from \"antd\";\r\nimport { Form, Input, Button, Card } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\n\r\nexport default function RegisterPage() {\r\n  const [registered, setregistered] = useState(false);\r\n\r\n  const onFinish = (values) => {\r\n    delete values[\"confirmPassword\"];\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}/api/v1/signup`, values) //saljemo sve valuese osim confirmPassword\r\n      .then((res) => {\r\n        openNotification(1);\r\n        setregistered(true);\r\n      })\r\n      .catch((res) => {\r\n        openNotification(0);\r\n      });\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {};\r\n\r\n  const openNotification = (status) => {\r\n    if (status === 1) {\r\n      notification.open({\r\n        message: \"Registracija uspješna\",\r\n        description: \"Biti ćete prebačeni na stranicu za prijavu\",\r\n      });\r\n    } else if (status === 0) {\r\n      notification.open({\r\n        message: \"Registracija neuspješna\",\r\n        description: \"Molimo pokušajte ponovno\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {registered ? <Redirect to=\"/login\" /> : null}\r\n      <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n        <NavBar />\r\n        <Content style={{ maxWidth: \"720px\", margin: \"auto\", padding: \"2em\" }}>\r\n          <Card>\r\n            <Title>Registracija</Title>\r\n            <Form\r\n              name=\"normal_login\"\r\n              className=\"login-form\"\r\n              onFinish={onFinish}\r\n              onFinishFailed={onFinishFailed}\r\n            >\r\n              <Form.Item\r\n                name=\"username\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Upiši jedinstveno korisničko ime!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Korisničko ime\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  { required: true, message: \"Upiši svoj Email!\" },\r\n                  { type: \"email\", message: \"Neispravan unos email-a\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Email\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"jmbag\"\r\n                rules={[\r\n                  { required: true, message: \"Upiši svoj JMBAG!\" },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      const re = /^[0-9\\b]+$/;\r\n                      if (value === \"\" || re.test(value)) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Neispravan unos JMBAG-a!\");\r\n                    },\r\n                  }),\r\n                  { min: 10, message: \"JMBAG mora sadržavati 10 brojeva!\" },\r\n                  { max: 10, message: \"JMBAG mora sadržavati 10 brojeva!\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"JMBAG\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"name\"\r\n                rules={[{ required: true, message: \"Upiši svoje ime!\" }]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Ime i prezime\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  { required: true, message: \"Upiši svoju lozinku!\" },\r\n                  { min: 8, message: \"Potrebno najmanje 8 znakova!\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                  type=\"password\"\r\n                  placeholder=\"Lozinka\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"confirmPassword\"\r\n                rules={[\r\n                  { required: true, message: \"Potvrdi svoju lozinku!\" },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Lozinke se ne podudaraju!\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                  type=\"password\"\r\n                  placeholder=\"Potvrdi lozinku\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"login-form-button\"\r\n                >\r\n                  Registriraj se\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </Card>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          PiccoloGrupa © 2020 FER PI\r\n        </Footer>\r\n        {/* <Button onClick={redirectLogin}>redirect</Button> */}\r\n      </Layout>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Form,\r\n  Select,\r\n  Typography,\r\n  Input,\r\n  notification,\r\n} from \"antd\";\r\nimport { HomeOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nconst { Title } = Typography;\r\nconst { Option } = Select;\r\n\r\nclass NewPostComponent extends React.Component {\r\n  token = this.props.token;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { gradovi: [], domovi: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var gradovi = [];\r\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/grad`).then((res) => {\r\n      gradovi = res.data;\r\n      this.setState({ gradovi: gradovi });\r\n    });\r\n\r\n    var domovi = [];\r\n    axios.get(`${process.env.REACT_APP_API_URL}/api/v1/dom`).then((res) => {\r\n      domovi = res.data;\r\n      this.setState({ domovi: domovi });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const onFinish = (values) => {\r\n      axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/v1/post`, values, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + this.props.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          openNotification(1);\r\n        })\r\n        .catch((err) => {\r\n          openNotification(0);\r\n        });\r\n    };\r\n\r\n    const openNotification = (status) => {\r\n      if (status === 1) {\r\n        notification.open({\r\n          message: \"Uspješna predaja\",\r\n          description: \"Novi oglas je uspješno predan!\",\r\n        });\r\n      } else if (status === 0) {\r\n        notification.open({\r\n          message: \"Neuspješna predaja\",\r\n          description: \"Molimo pokušajte ponovno.\",\r\n        });\r\n      }\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo) => {};\r\n\r\n    let optionGradovi = this.state.gradovi.map((grad) => (\r\n      <Option value={grad.idGrada}>{grad.imeGrada}</Option>\r\n    ));\r\n\r\n    let optionDomovi = this.state.domovi.map((dom) => (\r\n      <Option value={dom.idDom}>{dom.imeDoma}</Option>\r\n    ));\r\n\r\n    return (\r\n      <Card>\r\n        <Title>Novi oglas</Title>\r\n        <Title level={4}>Opis sobe</Title>\r\n        <Form\r\n          name=\"newPost\"\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n        >\r\n          {/* <Form.Item\r\n            name=\"grad\"\r\n            rules={[{ required: true, message: \"Odaberite grad!\" }]}\r\n          >\r\n            <Select placeholder=\"Grad\">{optionGradovi}</Select>\r\n          </Form.Item> */}\r\n\r\n          <Form.Item\r\n            name=\"domID\"\r\n            rules={[{ required: true, message: \"Odaberite dom!\" }]}\r\n          >\r\n            <Select placeholder=\"Dom\">{optionDomovi}</Select>\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"paviljon\"\r\n            rules={[\r\n              { required: true, message: \"Odaberite paviljon!\" },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  const re = /^[0-9\\b]+$/;\r\n                  if (\r\n                    value === \"\" ||\r\n                    (re.test(value) && value >= 1 && value <= 20)\r\n                  ) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject(\"Upišite broj od 1 do 20!\");\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<HomeOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Paviljon\"\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"kategorijaSobe\"\r\n            rules={[\r\n              { required: true, message: \"Odaberite kategoriju sobe!\" },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  const re = /^[0-9\\b]+$/;\r\n                  if (\r\n                    value === \"\" ||\r\n                    (re.test(value) && value >= 1 && value <= 7)\r\n                  ) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject(\"Upišite broj od 1 do 7!\");\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<HomeOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Kategorija sobe\"\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item\r\n            name=\"kat\"\r\n            rules={[\r\n              { required: true, message: \"Odaberite kat!\" },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  const re = /^[0-9\\b]+$/;\r\n                  if (\r\n                    value === \"\" ||\r\n                    (re.test(value) && value >= 1 && value <= 10)\r\n                  ) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject(\"Upišite broj od 1 do 10!\");\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input\r\n              prefix={<HomeOutlined className=\"site-form-item-icon\" />}\r\n              placeholder=\"Kat\"\r\n            />\r\n          </Form.Item>\r\n\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button\"\r\n            >\r\n              Predaj oglas\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewPostComponent;\r\n","import React, { useContext } from \"react\";\r\nimport { Layout } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport NewPostComponent from \"../components/NewPostComponent\";\r\n\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nexport default function NewPostPage() {\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n\r\n  return (\r\n    <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n      <NavBar />\r\n      <Content\r\n        className=\"site-layout-content\"\r\n        style={{ maxWidth: \"720px\", margin: \"auto\", padding: \"2em\" }}\r\n      >\r\n        <NewPostComponent token={info.token} />\r\n      </Content>\r\n\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        PiccoloGrupa © 2020 FER PI\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Form, Input, Button, Drawer, Select, notification } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Post/EditWorkerDrawerCssFix.css\";\r\nimport Title from \"antd/lib/skeleton/Title\";\r\nconst { Option } = Select;\r\n\r\nclass EditPost extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  validateMessages = () => {};\r\n\r\n  render() {\r\n    const openNotification = (status) => {\r\n      if (status === 1) {\r\n        notification.open({\r\n          message: \"Uspješno ažuriranje\",\r\n          description: \"Novi podatci su uspješno predani!\",\r\n        });\r\n      } else if (status === 0) {\r\n        notification.open({\r\n          message: \"Neuspješna predaja\",\r\n          description: \"Molimo pokušajte ponovno.\",\r\n        });\r\n      }\r\n    };\r\n\r\n    const onFinish = (values) => {\r\n      values.id = this.props.id;\r\n      values.password = \"12345678\";\r\n      axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/v1/currentuser`, values, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + this.props.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          openNotification(1);\r\n        })\r\n        .catch((err) => {\r\n          openNotification(0);\r\n        });\r\n    };\r\n\r\n    const onFinishPw = (values) => {\r\n      values.id = this.props.id;\r\n      values.username = this.props.username;\r\n      values.name = this.props.name;\r\n      values.email = this.props.email;\r\n      values.jmbag = this.props.jmbag;\r\n\r\n      axios\r\n        .post(\r\n          `${process.env.REACT_APP_API_URL}/api/v1/changePassword`,\r\n          values,\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + this.props.token, //the token is a variable which holds the token\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          openNotification(1);\r\n        })\r\n        .catch((err) => {\r\n          openNotification(0);\r\n        });\r\n    };\r\n\r\n    const onFinishFailed = () => {};\r\n\r\n    const layout = {\r\n      labelCol: { span: 8 },\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Drawer\r\n          title=\"Uredi korisničke podatke\"\r\n          onClose={() => this.props.closeHandler()}\r\n          visible={this.props.visible}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n          // style={{ width: \"100vw\" }}\r\n          width={\"400px\"}\r\n        >\r\n          <>\r\n            <Form\r\n              name=\"normal_login\"\r\n              className=\"login-form\"\r\n              onFinish={onFinish}\r\n              onFinishFailed={onFinishFailed}\r\n            >\r\n              <Form.Item\r\n                name=\"username\"\r\n                initialValue={this.props.username}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Upiši jedinstveno korisničko ime!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Korisničko ime\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"email\"\r\n                initialValue={this.props.email}\r\n                rules={[\r\n                  { required: true, message: \"Upiši svoj Email!\" },\r\n                  { type: \"email\", message: \"Neispravan unos email-a\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Email\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"jmbag\"\r\n                initialValue={this.props.jmbag}\r\n                rules={[\r\n                  { required: true, message: \"Upiši svoj JMBAG!\" },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      const re = /^[0-9\\b]+$/;\r\n                      if (value === \"\" || re.test(value)) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Neispravan unos JMBAG-a!\");\r\n                    },\r\n                  }),\r\n                  { min: 10, message: \"JMBAG mora sadržavati 10 brojeva!\" },\r\n                  { max: 10, message: \"JMBAG mora sadržavati 10 brojeva!\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"JMBAG\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"name\"\r\n                initialValue={this.props.name}\r\n                rules={[{ required: true, message: \"Upiši svoje ime!\" }]}\r\n              >\r\n                <Input\r\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                  placeholder=\"Ime i prezime\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"login-form-button\"\r\n                >\r\n                  Ažuriraj podatke\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n            <Title level={3}>Ažuriraj lozinku</Title>\r\n            <Form\r\n              name=\"normal_login\"\r\n              className=\"login-form\"\r\n              onFinish={onFinishPw}\r\n            >\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  { required: false, message: \"Upiši svoju lozinku!\" },\r\n                  { min: 8, message: \"Potrebno najmanje 8 znakova!\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                  type=\"password\"\r\n                  placeholder=\"Lozinka\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name=\"confirmPassword\"\r\n                rules={[\r\n                  { required: false, message: \"Potvrdi svoju lozinku!\" },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"Lozinke se ne podudaraju!\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input\r\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                  type=\"password\"\r\n                  placeholder=\"Potvrdi lozinku\"\r\n                />\r\n              </Form.Item>\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"login-form-button\"\r\n                >\r\n                  Ažuriraj lozinku\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </>\r\n        </Drawer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditPost;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Layout, Typography, Card } from \"antd\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport EditUser from \"../components/EditUser\";\r\nimport axios from \"axios\";\r\n\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\n\r\nexport default function ProfilePage() {\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n\r\n  const [editUserDrawerVisible, setEditUserDrawerVisible] = useState(false);\r\n  const [username, setUsername] = useState(null);\r\n  const [name, setName] = useState(null);\r\n  const [jmbag, setJmbag] = useState(null);\r\n  const [email, setEmail] = useState(null);\r\n  const [id, setId] = useState(null);\r\n\r\n  const showDrawer = () => {\r\n    setEditUserDrawerVisible(true);\r\n  };\r\n\r\n  const onCloseDrawer = () => {\r\n    setEditUserDrawerVisible(false);\r\n  };\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/v1/currentuser`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setUsername(res.data.username);\r\n        setName(res.data.name);\r\n        setJmbag(res.data.jmbag);\r\n        setEmail(res.data.email);\r\n        setId(res.data.id);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n      <NavBar />\r\n      <Content>\r\n        <br />\r\n        <Card\r\n          style={{ maxWidth: \"720px\", margin: \"auto\" }}\r\n          actions={[\r\n            <div onClick={() => showDrawer()}>\r\n              <EditOutlined /> uredi\r\n            </div>,\r\n          ]}\r\n        >\r\n          <Title>Moj profil</Title>\r\n          <br />\r\n          <p>Korisničko ime: {username}</p>\r\n          <p>Email: {email}</p>\r\n          <p>Ime i prezime: {name}</p>\r\n          <p>JMBAG: {jmbag}</p>\r\n        </Card>\r\n        <EditUser\r\n          visible={editUserDrawerVisible}\r\n          closeHandler={() => onCloseDrawer()}\r\n          username={username}\r\n          name={name}\r\n          email={email}\r\n          jmbag={jmbag}\r\n          id={id}\r\n          token={info.token}\r\n        />\r\n      </Content>\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        PiccoloGrupa © 2020 FER PI\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Layout, Typography, Input, Select } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport { Button, Card } from \"antd\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport MyPost from \"../components/Post/MyPost\";\r\n\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nexport default function MyPostsPage() {\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  const [currentEditPost, setCurrentEditPost] = useState(false);\r\n\r\n  const getPosts = () => {\r\n    var posts = [];\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/home/vlastitiOglasi`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        posts = res.data;\r\n        setPosts(res.data);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  const meta = {\r\n    columns: 1,\r\n    fields: [{ key: \"izvuc grad\", label: \"Grad\", requried: true }], //nije dobro tako, nego treba sve izvuc odjednom iz baze u jedan json\r\n  };\r\n\r\n  return (\r\n    <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n      <NavBar />\r\n      <Content>\r\n        {/* <div\r\n          className=\"site-layout-content\"\r\n          style={{ maxWidth: \"720px\", margin: \"0 auto\" }}\r\n        > */}\r\n        <br />\r\n        <Card style={{ maxWidth: \"720px\", margin: \"auto\", padding: \"2em\" }}>\r\n          <Title level={3}>Moji oglasi</Title>\r\n          <Link to=\"/newpost\">\r\n            <Button type=\"primary\">\r\n              Stvori novi oglas\r\n              <EditOutlined />\r\n            </Button>\r\n          </Link>\r\n        </Card>\r\n        <br />\r\n        {posts.map((post) => (\r\n          <MyPost\r\n            key={post.idOglas}\r\n            kat={post.kat}\r\n            idOglas={post.idOglas}\r\n            paviljon={post.paviljon}\r\n            kategorija_sobe={post.kategorijaSobe}\r\n            title={post.dom.imeDoma}\r\n            idDom={post.dom.idDom}\r\n            aktivan={post.aktivan}\r\n          />\r\n        ))}\r\n        <br />\r\n      </Content>\r\n\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        PiccoloGrupa © 2020 FER PI\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Layout, Typography, Input, Select } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport { Button, Card } from \"antd\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport FormBuilder from \"antd-form-builder\";\r\n\r\n// import { TokenContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nexport default function MyPostsPage() {\r\n  //const { token, setToken } = useContext(TokenContext);\r\n\r\n  const USER_ACTIVE_POST = {\r\n    // axios\r\n    //       .get(\"https://room-switchr.herokuapp.com/api/test/currentuser\", {\r\n    //         // headers: {\r\n    //         //   Authorization: \"Bearer \" + token, //the token is a variable which holds the token\r\n    //         // },\r\n    //       })\r\n    //       .then((res) => {\r\n    //         const korisnicko_ime = JSON.stringify(res.data);        //trenutno ne radi\r\n    //         setUsername(korisnicko_ime)\r\n    //       });\r\n  };\r\n  const USER_NOT_ACTIVE_POSTS = {};\r\n\r\n  const meta = {\r\n    columns: 1,\r\n    fields: [{ key: \"izvuc grad\", label: \"Grad\", requried: true }], //nije dobro tako, nego treba sve izvuc odjednom iz baze u jedan json\r\n  };\r\n\r\n  return (\r\n    <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n      <NavBar />\r\n      <Content style={{ maxWidth: \"720px\", margin: \"auto\", padding: \"2em\" }}>\r\n        {/* <div\r\n          className=\"site-layout-content\"\r\n          style={{ maxWidth: \"720px\", margin: \"0 auto\" }}\r\n        > */}\r\n        <Card>\r\n          <Title>\r\n            Moji oglasi &nbsp;&nbsp;&nbsp;&nbsp;\r\n            <Link to=\"/newpost\">\r\n              <Button type=\"primary\">\r\n                Stvori novi oglas\r\n                <EditOutlined />\r\n              </Button>\r\n            </Link>\r\n          </Title>\r\n\r\n          {/* ovdje ispisati njegove oglase, prvo onaj aktivni */}\r\n          <Card>\r\n            <h3>AKTIVAN OGLAS</h3>\r\n            <FormBuilder\r\n              name=\"aktivan_oglas\"\r\n              meta={meta}\r\n              values={USER_ACTIVE_POST}\r\n              viewMode={true}\r\n            />\r\n            <Link to=\"/editpost\" value={meta.fields.key}>\r\n              <Button type=\"primary\" style={{ padding: \"5px\" }}>\r\n                Uredi\r\n                <EditOutlined />\r\n              </Button>\r\n            </Link>\r\n          </Card>\r\n          <br></br>\r\n\r\n          {/* napraviti for petlju za svaki ostali oglas */}\r\n          <Card>\r\n            <FormBuilder\r\n              name=\"neaktivan_oglas\"\r\n              meta={meta}\r\n              values={USER_NOT_ACTIVE_POSTS}\r\n              viewMode={true}\r\n            />\r\n            <Link to=\"/editpost\" value={meta.fields.key}>\r\n              {/* za uređivanje poslati value=\"id post\" */}\r\n              <Button type=\"primary\" style={{ padding: \"5px\" }}>\r\n                Uredi\r\n                <EditOutlined />\r\n              </Button>\r\n            </Link>\r\n          </Card>\r\n          <br></br>\r\n        </Card>\r\n      </Content>\r\n\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        PiccoloGrupa © 2020 FER PI\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Card, Avatar, notification, Button } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\n// import { TokenContext } from \"../../Context\";\r\n// import { LoginContext } from \"../../Context\";\r\nimport { InfoContext } from \"../../Context\";\r\n\r\nimport { CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Meta } = Card;\r\n\r\nvar MappleToolTip = require(\"reactjs-mappletooltip\");\r\n\r\nfunction Post(props) {\r\n  const title = \"Dom: \" + props.title;\r\n  //const description = props.description;\r\n  const idOglas = props.idOglas;\r\n  const kategorija_sobe = props.kategorija_sobe;\r\n  const kat = props.kat;\r\n  const paviljon = props.paviljon;\r\n  const idLanac = props.idLanac;\r\n\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  \r\n  // const { token, setToken } = useContext(TokenContext);\r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  const [like, setLike] = useState();\r\n\r\n  const [like1, setLike1] = useState(false);\r\n  const [like2, setLike2] = useState(false);\r\n  const [like3, setLike3] = useState(false);\r\n\r\n  const likeErrorNotification = () => {\r\n    notification[\"error\"]({\r\n      message: \"Greška\",\r\n      description: \"Došlo je do greške prilikom potvrde zamjene.\",\r\n    });\r\n  };\r\n\r\n  const likeHandler = async (oglasId, stupanjLajkanja) => {\r\n    let values = {\r\n      oglasId: oglasId,\r\n      stupanjLajkanja: stupanjLajkanja,\r\n    };\r\n\r\n    try {\r\n      await axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/home/`, values, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          switch (res.data.stupanjLajkanja) {\r\n            case 1:\r\n              setLike1(true);\r\n              setLike2(false);\r\n              setLike3(false);\r\n              break;\r\n            case 2:\r\n              setLike1(false);\r\n              setLike2(true);\r\n              setLike3(false);\r\n              break;\r\n\r\n            case 3:\r\n              setLike1(false);\r\n              setLike2(false);\r\n              setLike3(true);\r\n              break;\r\n\r\n            case 0:\r\n              setLike1(false);\r\n              setLike2(false);\r\n              setLike3(false);\r\n              break;\r\n\r\n            default:\r\n              break;\r\n          }\r\n        });\r\n    } catch (error) {\r\n      likeErrorNotification();\r\n    }\r\n  };\r\n\r\n  const setLikeFromAPI = (lajk) => {\r\n    if (lajk == 1) {\r\n      setLike1(true);\r\n    }\r\n\r\n    if (lajk == 2) {\r\n      setLike2(true);\r\n    }\r\n\r\n    if (lajk == 3) {\r\n      setLike3(true);\r\n    }\r\n  };\r\n\r\n  const Remove = () => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/api/home/`,\r\n        {\r\n          stupanjLajkanja: \"4\",\r\n          oglasId: idOglas,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res);\r\n      });\r\n  };\r\n\r\n  const ConfirmSwap = async (oglasId) => {\r\n    let values = {\r\n      idLanca: idLanac,\r\n      //oglas: oglasId,\r\n    };\r\n    try {\r\n      await axios\r\n        .post(\r\n          `${process.env.REACT_APP_API_URL}/api/v1/potvrdiZamjenu`,\r\n          values,\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          notification.open({\r\n            message: \"Uspješno potvrđena zamjena\",\r\n            description:\r\n              \"Ukoliko se zamjena bude uspješna dobiti ćete mail sa potvrdom o uspješnoj zamjeni\",\r\n          });\r\n        });\r\n    } catch (error) {\r\n      likeErrorNotification();\r\n    }\r\n  };\r\n  const RejectSwap = async (oglasId) => {\r\n    let values = {\r\n      idLanca: idLanac,\r\n      //oglas: oglasId,\r\n    };\r\n    try {\r\n      await axios\r\n        .post(`${process.env.REACT_APP_API_URL}/api/v1/odbijZamjenu`, values, {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          notification.open({\r\n            message: \"Uspješno odbačena zamjena\",\r\n            // description: \"\",\r\n          });\r\n        });\r\n    } catch (error) {\r\n      likeErrorNotification();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLikeFromAPI(props.lajk);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {info.loggedIn ? (\r\n        <Card\r\n          style={{ maxWidth: \"720px\", margin: \"auto\" }}\r\n          actions={[\r\n            <div onClick={() => ConfirmSwap(idOglas)}>\r\n              <CheckCircleOutlined /> Potvrdi\r\n            </div>,\r\n            <div onClick={() => RejectSwap(idOglas)}>\r\n              <CloseCircleOutlined /> Odbij\r\n            </div>,\r\n          ]}\r\n        >\r\n          <Meta\r\n            title={title}\r\n            description={\r\n              <React.Fragment>\r\n                <p>Paviljon:{paviljon}</p>\r\n                <p>Kat:{kat}</p>\r\n                <p>Kategorija sobe:{kategorija_sobe}</p>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </Card>\r\n      ) : (\r\n        <Card style={{ maxWidth: \"720px\", margin: \"auto\" }}>\r\n          <Meta\r\n            title={title}\r\n            description={\r\n              <React.Fragment>\r\n                <p>Paviljon: {paviljon}</p>\r\n                <p>Kat: {kat}</p>\r\n                <p>Kategorija sobe: {kategorija_sobe}</p>\r\n              </React.Fragment>\r\n            }\r\n          />\r\n        </Card>\r\n      )}\r\n\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Layout } from \"antd\";\r\nimport { Button, Card, Form, notification } from \"antd\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport PostConfirm from \"../components/Post/PostConfirm\";\r\nimport Title from \"antd/lib/skeleton/Title\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\n\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nexport default function ConfirmSwapPage() {\r\n  //let { token, id_oglas_moj, id_oglas_tudi } = useParams();\r\n\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n\r\n  const [posts, setPosts] = useState([]);\r\n  //const [idLanac, setIdLanac] = useState([]);\r\n\r\n  const Confirm = () => {\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}/api/v1/potvrdiZamjenu`, {\r\n        token: info.token,\r\n        //idLanac: idLanac,\r\n      })\r\n      .then((res) => {\r\n        notification.open({\r\n          message: \"Uspješno zatražena zamjena!\",\r\n          description: \"Biti ćete obavješteni putem maila o izvršenoj zamjeni.\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const Cancel = () => {\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}/api/v1/odbijZamjenu`, {\r\n        token: info.token,\r\n      })\r\n      .then((res) => {\r\n        notification.open({\r\n          message: \"Uspješno odbačena zamjena!\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const getPosts = () => {\r\n    var posts = [];\r\n\r\n    //dobivam idLanac, rednibroj, oglas za mog studenta\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/v1/zamjene`, {\r\n        //provjeriti sve sa backendom\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        posts = res.data;\r\n        setPosts(posts);\r\n        //setIdLanac(res.data.idLanca);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n        <NavBar />\r\n        {/* <div className=\"nav\" style={{justifyContent: 'left'}}>\r\n                <img alt=\"logo\" src=\"/room.png\" className=\"navLogo\" />\r\n                <Link to=\"/\">\r\n                    <span className=\"navName\" >RoomSwitchr</span>\r\n                </Link>\r\n            </div> */}\r\n\r\n        <Content style={{ padding: \"0 50px\" }}>\r\n          <br />\r\n\r\n          {posts.length != 0 ? (\r\n            posts.map((post) => (\r\n              <div\r\n                className=\"site-layout-content\"\r\n                style={{ maxWidth: \"720px\", margin: \"0 auto\" }}\r\n              >\r\n                <PostConfirm\r\n                  key={post.oglas.idOglas}\r\n                  idOglas={post.oglas.idOglas}\r\n                  kat={post.oglas.kat}\r\n                  paviljon={post.oglas.paviljon}\r\n                  kategorija_sobe={post.oglas.kategorijaSobe}\r\n                  title={post.oglas.dom.imeDoma}\r\n                  idLanac={post.idLanca}\r\n                  username={post.oglas.student.username}\r\n                  email={post.oglas.student.email}\r\n                />\r\n                <br />\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <Card\r\n              style={{ maxWidth: \"720px\", margin: \"auto\", textAlign: \"center\" }}\r\n            >\r\n              <p>Nema oglasa za prikaz.</p>\r\n            </Card>\r\n          )}\r\n        </Content>\r\n\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          PiccoloGrupa © 2020 FER PI\r\n        </Footer>\r\n      </Layout>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Layout, Typography, Input, Select } from \"antd\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport { Button, Card } from \"antd\";\r\nimport axios from \"axios\";\r\nimport Post from \"../components/Post/Post\";\r\n\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Title } = Typography;\r\n\r\nexport default function MyPostsPage() {\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  const getPosts = () => {\r\n    var posts = [];\r\n    axios\r\n      .get(\r\n        `${process.env.REACT_APP_API_URL}/api/home/oglasiStudenataKojiSuLajkali`,\r\n        {\r\n          //provjeriti sve sa backendom\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        posts = res.data;\r\n        setPosts(posts);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, []);\r\n\r\n  return (\r\n    <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n      <NavBar />\r\n      <Content>\r\n        <br />\r\n        <Card style={{ maxWidth: \"720px\", margin: \"auto\", padding: \"2em\" }}>\r\n          <Title level={3}>\r\n            Oglasi osoba koje su označile vaš oglas sa \"sviđa mi se\"\r\n          </Title>\r\n        </Card>\r\n        <br />\r\n        {posts.length != 0 ? (\r\n          posts.map((post) => (\r\n            <Post\r\n              key={post.oglas.idOglas}\r\n              kat={post.oglas.kat}\r\n              paviljon={post.oglas.paviljon}\r\n              kategorija_sobe={post.oglas.kategorijaSobe}\r\n              title={post.oglas.dom.imeDoma}\r\n              idOglas={post.oglas.idOglas}\r\n              lajk={post.stupanjLajkanja}\r\n              username={post.oglas.student.username}\r\n              email={post.oglas.student.email}\r\n            />\r\n          ))\r\n        ) : (\r\n          <Card\r\n            style={{ maxWidth: \"720px\", margin: \"auto\", textAlign: \"center\" }}\r\n          >\r\n            <p>Nema oglasa za prikaz.</p>\r\n          </Card>\r\n        )}\r\n\r\n        <br />\r\n      </Content>\r\n\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        PiccoloGrupa © 2020 FER PI\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Layout } from \"antd\";\r\nimport { Button, Card, Form, notification } from \"antd\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Post from \"../components/Post/Post\";\r\nimport axios from \"axios\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport NavBar from \"../components/NavBar/NavBar\";\r\nimport { CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\r\n\r\n// import { LoginContext } from \"../Context\";\r\n// import { TokenContext } from \"../Context\";\r\nimport { InfoContext } from \"../Context\";\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nexport default function SCDjelatnikPage() {\r\n  const { info, setInfo } = useContext(InfoContext);\r\n  \r\n  // const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n  // const { token, setToken } = useContext(TokenContext);\r\n  const [lanci, setLanci] = useState([]);\r\n\r\n  const ConfirmSwap = async (idLanac) => {\r\n    let values = {\r\n      idLanca: idLanac,\r\n      //oglas: oglasId,\r\n    };\r\n    try {\r\n      await axios\r\n        .post(\r\n          `${process.env.REACT_APP_API_URL}/api/v1/potvrdiZamjenu`,\r\n          values,\r\n          {\r\n            headers: {\r\n              Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          notification.open({\r\n            message: \"Uspješno potvrđena zamjena\",\r\n            description:\r\n              \"Ukoliko se zamjena bude uspješna dobiti ćete mail sa potvrdom o uspješnoj zamjeni\",\r\n          });\r\n          getSwaps();\r\n        });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const getSwaps = () => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}/api/v1/zamjene`, {\r\n        headers: {\r\n          Authorization: \"Bearer \" + info.token, //the token is a variable which holds the token\r\n        },\r\n      })\r\n      .then((res) => {\r\n        // console.log(res.data);\r\n        var uniqueIds = [];\r\n        var uniqueIdsObject = [];\r\n\r\n        if (res.data.length === 0) {\r\n          //neš tu treba\r\n        } else {\r\n          res.data.forEach((objekt) => {\r\n            // console.log(objekt);\r\n            // console.log(\"(!uniqueIds.includes(objekt.idLanca)):\");\r\n            // console.log(!uniqueIds.includes(objekt.idLanca));\r\n            // console.log(\"uniqueIds:\");\r\n            // console.log(uniqueIds);\r\n            if (!uniqueIds.includes(objekt.idLanca)) {\r\n              uniqueIds.push(objekt.idLanca);\r\n              uniqueIdsObject.push({ idLanca: objekt.idLanca, oglasi: [] });\r\n            }\r\n          });\r\n\r\n          res.data.forEach((objekt) => {\r\n            for (var i = 0; i < uniqueIdsObject.length; i++) {\r\n              if (uniqueIdsObject[i].idLanca == objekt.idLanca) {\r\n                uniqueIdsObject[i].oglasi.push(objekt.oglas);\r\n              }\r\n            }\r\n          });\r\n\r\n          setLanci(uniqueIdsObject);\r\n          // console.log(uniqueIds);\r\n          // console.log(uniqueIdsObject);\r\n        }\r\n      });\r\n  };\r\n\r\n  let lanciComponent = Object.keys(lanci).map((lanac) => {\r\n    return (\r\n      <Card\r\n        title={lanci[lanac].idLanca}\r\n        bordered={false}\r\n        style={{ maxWidth: \"720px\", margin: \"auto\", width: \"100%\" }}\r\n        actions={[\r\n          <div onClick={() => ConfirmSwap(lanci[lanac].idLanca)}>\r\n            <CheckCircleOutlined /> Potvrdi\r\n          </div>,\r\n        ]}\r\n      >\r\n        {lanci[lanac].oglasi.map((oglas) => {\r\n          return (\r\n            <div\r\n              style={{\r\n                borderBottom: \"2px solid #f0f0f0\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              <h3>Student</h3>\r\n              <p>ime: {oglas.student.name}</p>\r\n              <p>email: {oglas.student.email}</p>\r\n              <p>JMBAG: {oglas.student.jmbag}</p>\r\n              <br />\r\n              <h3>Soba</h3>\r\n\r\n              <p>Dom: {oglas.dom.imeDoma}</p>\r\n              <p>Paviljon: {oglas.paviljon}</p>\r\n              <p>Kat: {oglas.kat}</p>\r\n              <p>Kategorija sobe: {oglas.kategorijaSobe}</p>\r\n              <br />\r\n            </div>\r\n          );\r\n        })}\r\n      </Card>\r\n    );\r\n  });\r\n\r\n  const Confirm = (id) => {\r\n    axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/api/v1/potvrdiZamjenu`,\r\n        {},\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + info.token,\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        notification.open({\r\n          message: \"Završena zamjena\",\r\n          description: \"Uspješno ste potvrdili zamjene\",\r\n        });\r\n      })\r\n      .catch((res) => {\r\n        console.log(\"request failed\", res);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getSwaps();\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\r\n        <NavBar />\r\n        <Content style={{ padding: \"0 50px\" }}>\r\n          <div\r\n            className=\"site-layout-content\"\r\n            style={{ maxWidth: \"720px\", margin: \"0 auto\" }}\r\n          >\r\n            <br />\r\n          </div>\r\n        </Content>\r\n        {lanciComponent}\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          PiccoloGrupa © 2020 FER PI\r\n        </Footer>\r\n      </Layout>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport HomePage from \"./pages/HomePage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport NewPostPage from \"./pages/NewPostPage\";\r\nimport ProfilePage from \"./pages/ProfilePage\";\r\nimport MyPostsPage from \"./pages/MyPostsPage\";\r\nimport EditPostPage from \"./pages/EditPostPage\";\r\nimport ConfirmSwapPage from \"./pages/ConfirmSwapPage\";\r\nimport RecievedLikesPage from \"./pages/RecievedLikesPage\";\r\nimport SCDjelatnikPage from \"./pages/SCDjelatnikPage\";\r\nimport dotenv from \"dotenv\";\r\n\r\n// import objaveService from './services/ObjaveService';\r\n\r\n// import { LoginContext } from \"./Context\";\r\n// import { TokenContext } from \"./Context\";\r\n// import { RoleContext } from \"./Context\";\r\nimport { InfoProvider } from \"./Context\";\r\n\r\n\r\nexport default function App() {\r\n  require(\"dotenv\").config();\r\n\r\n  // state = {\r\n  //   objave: []\r\n  // };\r\n\r\n  // componentDidMount(){\r\n  //     objaveService.getObjave().then((res) => {\r\n  //     this.setState({ objave: res.data})\r\n  //   });\r\n  // }\r\n\r\n  //render() {\r\n  // const [loggedIn, setLoggedIn] = useState(false);\r\n  // const [token, setToken] = useState(\"\");\r\n  // const [role, setRole] = useState(\"\");\r\n\r\n  const App = () => (\r\n    <div>\r\n      <InfoProvider>\r\n      {/* <LoginContext.Provider value={{ loggedIn, setLoggedIn }}>\r\n        <TokenContext.Provider value={{ token, setToken }}>\r\n          <RoleContext.Provider value={{ role, setRole }}> */}\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route exact path=\"/login\" component={LoginPage} />\r\n            <Route exact path=\"/register\" component={RegisterPage} />\r\n            <Route exact path=\"/myposts\" component={MyPostsPage} />\r\n            <Route exact path=\"/newpost\" component={NewPostPage} />\r\n            <Route exact path=\"/editpost\" component={EditPostPage} />\r\n            <Route exact path=\"/profile\" component={ProfilePage} />\r\n            <Route exact path=\"/confirmswap\" component={ConfirmSwapPage} />\r\n            <Route\r\n              exact\r\n              path=\"/recievedlikesposts\"\r\n              component={RecievedLikesPage}\r\n            />\r\n            <Route exact path=\"/scdjelatnik\" component={SCDjelatnikPage} />\r\n          {/* </RoleContext.Provider>\r\n        </TokenContext.Provider>\r\n      </LoginContext.Provider> */}\r\n      </InfoProvider>\r\n    </div>\r\n  );\r\n  return (\r\n    <Switch basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </Switch>\r\n  );\r\n  //}\r\n}\r\n\r\n//export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"antd/dist/antd.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}